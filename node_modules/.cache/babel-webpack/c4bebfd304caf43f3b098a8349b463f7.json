{"ast":null,"code":"import _asyncToGenerator from \"/home/ggomez/Escritorio/KeyBoardTale/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../shared/components/header/header.component\";\nimport * as i2 from \"../shared/components/footer/footer.component\";\nexport let LayoutComponent = /*#__PURE__*/(() => {\n  class LayoutComponent {\n    constructor() {\n      this.texts = [[], []]; // textos divididos en substrings\n\n      this.currentText = 0; // texto al que pertenece el subtring que se esta mostrando\n\n      this.currentSub = 0; // substring que se muestra en pantalla\n\n      this.instructions = \"\"; // instrucciones del juego\n      //audios: Audio[] = [];\n\n      this.alreadyShown = \"\";\n      this.playerInput = \"\"; // lo que el jugador esta ingresando en tiempo real\n\n      this.audios = []; // coleccion de todos los audios\n\n      this.substringInput = [];\n      this.substringScore = [];\n      this.substringSound = [];\n      this.substringValue = [];\n      this.minValues = [];\n    }\n\n    ngOnInit() {\n      this.fetchTexts().then(() => this.fetchSound()).then(() => {\n        this.initializeMatrixes();\n        this.setMinValues();\n        this.setSounds();\n        this.setSubstringValues();\n        document.addEventListener('keydown', event => {\n          this.processInput(event.key);\n        });\n      });\n    }\n\n    setSubstringValues() {\n      for (let t = 0; t < this.texts.length; t++) {\n        for (let s = 0; s < this.texts[t].length; s++) {\n          for (let i = 0; i < this.texts[t][s].length; i++) {\n            if (65 <= this.texts[t][s].charCodeAt(i) && this.texts[t][s].charCodeAt(i) <= 90) {\n              // mayusculas\n              this.substringValue[t][s][this.texts[t][s].charCodeAt(i) - 55] += 1;\n            } else if (97 <= this.texts[t][s].charCodeAt(i) && this.texts[t][s].charCodeAt(i) <= 122) {\n              // minusculas\n              this.substringValue[t][s][this.texts[t][s].charCodeAt(i) - 87] += 1;\n            } else if (48 <= this.texts[t][s].charCodeAt(i) && this.texts[t][s].charCodeAt(i) <= 57) {\n              // numeros\n              this.substringValue[t][s][this.texts[t][s].charCodeAt(i) - 48] += 1;\n            }\n          }\n        }\n      }\n\n      console.log('values: ', this.substringValue[0]);\n    }\n\n    setSounds() {\n      var _this = this;\n\n      return _asyncToGenerator(function* () {\n        let result = yield fetch('/assets/texts/indiceAudios.txt').then(data => data.text());\n        let instances = result.match(/.*Audio\\.txt/g);\n\n        for (let i = 0; i < instances.length; i++) {\n          let j = 0;\n          yield fetch('/assets/texts/' + instances[i]).then(data => data.text()).then(text => {\n            let arrays = text.match(/\\[(.*)\\]/g);\n            arrays.forEach(value => {\n              _this.substringSound[i][j] = _this.textToValues(value);\n              j++;\n            });\n          });\n        }\n      })();\n    }\n\n    setMinValues() {\n      var _this2 = this;\n\n      return _asyncToGenerator(function* () {\n        let result = yield fetch('/assets/texts/indiceValores.txt').then(data => data.text());\n        let instances = result.match(/.*Valores\\.txt/g);\n\n        for (let i = 0; i < instances.length; i++) {\n          let j = 0;\n          yield fetch('/assets/texts/' + instances[i]).then(data => data.text()).then(text => {\n            let arrays = text.match(/\\[(.*)\\]/g);\n            arrays.forEach(value => {\n              _this2.minValues[i][j] = _this2.textToValues(value);\n              j++;\n            });\n          });\n        }\n      })();\n    }\n\n    textToValues(value) {\n      let valuesArray = [];\n      value.split(/\\[|\\]/)[1].split(',').forEach(value => valuesArray.push(+value));\n      return valuesArray;\n    }\n\n    fetchTexts() {\n      var _this3 = this;\n\n      return _asyncToGenerator(function* () {\n        yield fetch('/assets/texts/instrucciones.txt').then(data => data.text()).then(text => _this3.instructions = text);\n        let result = yield fetch('/assets/texts/indice.txt').then(data => data.text());\n        let instances = result.match(/([a-z]*[A-Z]*[0-9]*)*\\.txt/g);\n\n        for (let i = 0; i < instances.length; i++) {\n          let j = 0;\n          yield fetch('/assets/texts/' + instances[i]).then(data => data.text()).then(text => {\n            _this3.textToFrases(text).forEach(frase => {\n              _this3.texts[i][j] = frase;\n              j++;\n            });\n          });\n        }\n      })();\n    }\n\n    textToFrases(text) {\n      let ret = [];\n      text.split(/\\|\\|\\|/).forEach(frase => {\n        ret.push(frase);\n      });\n      return ret;\n    }\n\n    fetchSound() {\n      var _this4 = this;\n\n      return _asyncToGenerator(function* () {\n        let result = \"\";\n        yield fetch('/assets/sounds/audios.txt').then(data => data.text()).then(text => result = text);\n        let instances = result.match(/(.*\\.wav)/g);\n\n        for (let i = 0; i < instances.length; i++) {\n          _this4.audios.push(new Audio('/assets/sounds/' + instances[i]));\n        }\n      })();\n    }\n\n    processInput(text) {\n      for (let i = 0; i < text.length; i++) {\n        if (65 <= text.charCodeAt(i) && text.charCodeAt(i) <= 90) {\n          // mayusculas\n          this.substringInput[this.currentText][this.currentSub][text.charCodeAt(i) - 55] += 1;\n          if (this.substringSound[this.currentText][this.currentSub][text.charCodeAt(i) - 55] !== 0) this.audios[this.substringSound[this.currentText][this.currentSub][text.charCodeAt(i) - 55]].play();\n        } else if (97 <= text.charCodeAt(i) && text.charCodeAt(i) <= 122) {\n          // minusculas\n          this.substringInput[this.currentText][this.currentSub][text.charCodeAt(i) - 87] += 1;\n          if (this.substringSound[this.currentText][this.currentSub][text.charCodeAt(i) - 87] !== 0) this.audios[this.substringSound[this.currentText][this.currentSub][text.charCodeAt(i) - 87]].play();\n        } else if (48 <= text.charCodeAt(i) && text.charCodeAt(i) <= 57) {\n          // numeros\n          this.substringInput[this.currentText][this.currentSub][text.charCodeAt(i) - 48] += 1;\n          if (this.substringSound[this.currentText][this.currentSub][text.charCodeAt(i) - 48] !== 0) this.audios[this.substringSound[this.currentText][this.currentSub][text.charCodeAt(i) - 48]].play();\n        }\n      }\n\n      this.playerInput = \"\";\n      this.calculateScore();\n    }\n\n    initializeMatrixes() {\n      for (let t = 0; t < this.texts.length; t++) {\n        this.substringInput[t] = new Array();\n        this.substringScore[t] = new Array();\n        this.substringSound[t] = new Array();\n        this.substringValue[t] = new Array();\n        this.minValues[t] = new Array();\n\n        for (let s = 0; s < this.texts[t].length; s++) {\n          this.substringInput[t][s] = new Array();\n          this.substringScore[t][s] = new Array();\n          this.substringSound[t][s] = new Array();\n          this.substringValue[t][s] = new Array();\n          this.minValues[t][s] = new Array();\n\n          for (let n = 0; n < 37; n++) {\n            this.substringInput[t][s][n] = 0;\n            this.substringScore[t][s][n] = 0;\n            this.substringSound[t][s][n] = 0;\n            this.substringValue[t][s][n] = 0;\n            this.minValues[t][s][n] = 0;\n          }\n        }\n      }\n    }\n\n    calculateScore() {\n      let ret = true;\n\n      for (let i = 0; i < this.substringScore[0][0].length; i++) {\n        if (this.substringValue[this.currentText][this.currentSub][i] !== 0) {\n          this.substringScore[this.currentText][this.currentSub][i] = this.substringInput[this.currentText][this.currentSub][i] / this.substringValue[this.currentText][this.currentSub][i];\n        } else {\n          this.substringScore[this.currentText][this.currentSub][i] = 1;\n        }\n      }\n\n      let index = 0;\n\n      while (ret && index < this.substringScore[0][0].length) {\n        ret = this.substringScore[this.currentText][this.currentSub][index] >= this.minValues[this.currentText][this.currentSub][index];\n        index++;\n      }\n\n      console.log(this.substringScore[this.currentText][this.currentSub]);\n      console.log(this.minValues[this.currentText][this.currentSub]);\n      if (ret) this.nextSub();\n    }\n\n    nextSub() {\n      if (this.currentSub < this.texts[this.currentText].length - 1) {\n        this.alreadyShown += this.texts[this.currentText][this.currentSub];\n        this.currentSub++;\n      } else if (this.currentText < this.texts.length - 1) {\n        this.currentText++;\n        this.currentSub = 0;\n      } else {//something something\n      }\n    }\n\n  }\n\n  LayoutComponent.ɵfac = function LayoutComponent_Factory(t) {\n    return new (t || LayoutComponent)();\n  };\n\n  LayoutComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: LayoutComponent,\n    selectors: [[\"app-layout\"]],\n    decls: 15,\n    vars: 3,\n    consts: [[2, \"width\", \"100%\", \"height\", \"100%\", \"display\", \"flex\", \"flex-direction\", \"column\", \"justify-content\", \"space-between\"], [1, \"container\"], [1, \"content-container\"], [1, \"instrucciones-container\"], [1, \"instrucciones\"], [1, \"texto-container\"], [1, \"texto-negro\"], [1, \"texto-rojo\"], [2, \"align-self\", \"flex-end\"]],\n    template: function LayoutComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0);\n        i0.ɵɵelementStart(1, \"div\");\n        i0.ɵɵelement(2, \"app-header\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(3, \"div\", 1);\n        i0.ɵɵelementStart(4, \"div\", 2);\n        i0.ɵɵelementStart(5, \"div\", 3);\n        i0.ɵɵelementStart(6, \"div\", 4);\n        i0.ɵɵtext(7);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(8, \"div\", 5);\n        i0.ɵɵelementStart(9, \"div\", 6);\n        i0.ɵɵtext(10);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(11, \"div\", 7);\n        i0.ɵɵtext(12);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(13, \"div\", 8);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(14, \"app-footer\");\n        i0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(7);\n        i0.ɵɵtextInterpolate1(\" \", ctx.instructions, \" \");\n        i0.ɵɵadvance(3);\n        i0.ɵɵtextInterpolate1(\" \", ctx.alreadyShown, \" \");\n        i0.ɵɵadvance(2);\n        i0.ɵɵtextInterpolate1(\" \", ctx.texts[ctx.currentText][ctx.currentSub], \" \");\n      }\n    },\n    directives: [i1.HeaderComponent, i2.FooterComponent],\n    styles: [\".container[_ngcontent-%COMP%], .content-container[_ngcontent-%COMP%]{width:100%;height:100%}.content-container[_ngcontent-%COMP%]{display:flex;flex-direction:column;align-items:center;background:#90ee90}.instrucciones-container[_ngcontent-%COMP%]{max-width:70%;max-height:10%;background:red}.instrucciones[_ngcontent-%COMP%]{font-family:EB Garamond,serif;font-size:x-large}.texto-container[_ngcontent-%COMP%]{width:70%;height:100%;background:grey;text-align:justify}.texto-negro[_ngcontent-%COMP%], .texto-rojo[_ngcontent-%COMP%]{font-family:EB Garamond,serif;font-size:x-large}.texto-rojo[_ngcontent-%COMP%]{color:red}\"]\n  });\n  return LayoutComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}